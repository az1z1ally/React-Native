/*
=============== Appearance Module
import {Appearance} from 'react-native';

The Appearance module exposes information about the user's appearance preferences, such as their preferred color scheme (light or dark).

const colorScheme = Appearance.getColorScheme();
if (colorScheme === 'dark') {
  // Use dark color scheme
}

Although the color scheme is available immediately, this may change (e.g. scheduled color scheme change at sunrise or sunset). 
Any rendering logic or styles that depend on the user preferred color scheme should try to call this function on every render, 
rather than caching the value. For example, you may use the useColorScheme React hook as it provides and subscribes to color 
scheme updates, or you may use inline styles rather than setting a value in a StyleSheet.

============== useColorScheme
import {useColorScheme} from 'react-native';

The useColorScheme React hook provides and subscribes to color scheme updates from the Appearance module. The return value indicates the current user preferred color scheme. The value may be updated later, either through direct user action (e.g. theme selection in device settings) or on a schedule (e.g. light and dark themes that follow the day/night cycle).

Supported color schemes
"light": The user prefers a light color theme.
"dark": The user prefers a dark color theme.
null: The user has not indicated a preferred color theme.

*/


/*
ScrollView Vs FlatList

ScrollView renders all its child components at once, but  this has a perfomance downside especially when you have long list of items that you want to display which may not even be shown resulting in slow rendering & increasing memory usage 
This is where FlatList comes into play: it renders items lazily, when they are about to appear, and removes items that scroll way off screen to save memory & processing time
*/


/*
========= FLEXBOX
Flex
flex will define how your items are going to “fill” over the available space along your main axis. Space will be divided according to each element's flex property.

In the following example, the red, orange, and green views are all children in the container view that has flex: 1 set. The red view uses flex: 1 , the orange view uses flex: 2, and the green view uses flex: 3 . 1+2+3 = 6, which means that the red view will get 1/6 of the space, the orange 2/6 of the space, and the green 3/6 of the space.


--Flex Direction
flexDirection controls the direction in which the children of a node are laid out. This is also referred to as the main axis. The cross axis is the axis perpendicular to the main axis, or the axis which the wrapping lines are laid out in.

column (default value) Align children from top to bottom. If wrapping is enabled, then the next line will start to the right of the first item on the top of the container.

row Align children from left to right. If wrapping is enabled, then the next line will start under the first item on the left of the container.

column-reverse Align children from bottom to top. If wrapping is enabled, then the next line will start to the right of the first item on the bottom of the container.

row-reverse Align children from right to left. If wrapping is enabled, then the next line will start under the first item on the right of the container.

--- Flex Wrap
The flexWrap property is set on containers and it controls what happens when children overflow the size of the container along the main axis. By default, children are forced into a single line (which can shrink elements). If wrapping is allowed, items are wrapped into multiple lines along the main axis if needed.

When wrapping lines, alignContent can be used to specify how the lines are placed in the container

-- Layout Direction
Layout direction specifies the direction in which children and text in a hierarchy should be laid out. Layout direction also affects what edge start and end refer to. By default, React Native lays out with LTR layout direction. In this mode start refers to left and end refers to right.

LTR (default value) Text and children are laid out from left to right. Margin and padding applied to the start of an element are applied on the left side.

RTL Text and children are laid out from right to left. Margin and padding applied to the start of an element are applied on the right side.

--- Justify Content
justifyContent describes how to align children within the main axis of their container. For example, you can use this property to center a child horizontally within a container with flexDirection set to row or vertically within a container with flexDirection set to column.

flex-start(default value) Align children of a container to the start of the container's main axis.

flex-end Align children of a container to the end of the container's main axis.

center Align children of a container in the center of the container's main axis.

space-between Evenly space off children across the container's main axis, distributing the remaining space between the children.

space-around Evenly space off children across the container's main axis, distributing the remaining space around the children. Compared to space-between, using space-around will result in space being distributed to the beginning of the first child and end of the last child.

space-evenly Evenly distribute children within the alignment container along the main axis. The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, are all exactly the same.

-- Align Items
alignItems describes how to align children along the cross axis of their container. It is very similar to justifyContent but instead of applying to the main axis, alignItems applies to the cross axis.

stretch (default value) Stretch children of a container to match the height of the container's cross axis.

flex-start Align children of a container to the start of the container's cross axis.

flex-end Align children of a container to the end of the container's cross axis.

center Align children of a container in the center of the container's cross axis.

baseline Align children of a container along a common baseline. Individual children can be set to be the reference baseline for their parents.

--- Align Self
alignSelf has the same options and effect as alignItems but instead of affecting the children within a container, you can apply this property to a single child to change its alignment within its parent. alignSelf overrides any option set by the parent with alignItems.

--- Align Content
alignContent defines the distribution of lines along the cross-axis. This only has effect when items are wrapped to multiple lines using flexWrap.

flex-start (default value) Align wrapped lines to the start of the container's cross axis.

flex-end Align wrapped lines to the end of the container's cross axis.

stretch (default value when using Yoga on the web) Stretch wrapped lines to match the height of the container's cross axis.

center Align wrapped lines in the center of the container's cross axis.

space-between Evenly space wrapped lines across the container's cross axis, distributing the remaining space between the lines.

space-around Evenly space wrapped lines across the container's cross axis, distributing the remaining space around the lines. Compared to space-between, using space-around will result in space being distributed to the beginning of the first line and the end of the last line.

--- Flex Basis, Grow, and Shrink
flexBasis is an axis-independent way of providing the default size of an item along the main axis. Setting the flexBasis of a child is similar to setting the width of that child if its parent is a container with flexDirection: row or setting the height of a child if its parent is a container with flexDirection: column. The flexBasis of an item is the default size of that item, the size of the item before any flexGrow and flexShrink calculations are performed.

flexGrow describes how much space within a container should be distributed among its children along the main axis. After laying out its children, a container will distribute any remaining space according to the flex grow values specified by its children.

flexGrow accepts any floating point value >= 0, with 0 being the default value. A container will distribute any remaining space among its children weighted by the children’s flexGrow values.

flexShrink describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis. flexShrink is very similar to flexGrow and can be thought of in the same way if any overflowing size is considered to be negative remaining space. These two properties also work well together by allowing children to grow and shrink as needed.

flexShrink accepts any floating point value >= 0, with 0 being the default value (on the web, the default is 1). A container will shrink its children weighted by the children’s flexShrink values.

--- Row Gap, Column Gap and Gap
rowGap sets the size of the gap (gutter) between an element's rows.

columnGap sets the size of the gap (gutter) between an element's columns.

gap sets the size of the gap (gutter) between rows and columns. It is a shorthand for rowGap and columnGap.

You can use flexWrap and alignContent alongwith gap to add consistent spacing between items.

--- Width and Height
The width property specifies the width of an element's content area. Similarly, the height property specifies the height of an element's content area.
*/



/*
  ======= YUP PACKAGE
  $~ npm i yup

  Getting Started
  Schema are comprised of parsing actions (transforms) as well as assertions (tests) about the input value. Validate an input value to parse it and run the configured set of assertions. Chain together methods to build a schema.

  import { object, string, number, date, InferType } from 'yup';

  let userSchema = object({
    name: string().required(),
    age: number().required().positive().integer(),
    email: string().email(),
    website: string().url().nullable(),
    createdOn: date().default(() => new Date()),
  });

  // parse and assert validity
  const user = await userSchema.validate(await fetchUser());

  type User = InferType<typeof userSchema>;
  /* {
    name: string;
    age: number;
    email?: string | undefined
    website?: string | null | undefined
    createdOn: Date
  }*/
  Use a schema to coerce or "cast" an input value into the correct type, and optionally transform that value into more concrete and specific values, without making further assertions.

  // Attempts to coerce values to the correct type
  const parsedUser = userSchema.cast({
    name: 'jimmy',
    age: '24',
    createdOn: '2014-09-23T19:25:25Z',
  });
  // ✅  { name: 'jimmy', age: 24, createdOn: Date }
  Know that your input value is already parsed? You can "strictly" validate an input, and avoid the overhead of running parsing logic.

  // ❌  ValidationError "age is not a number"
  const parsedUser = await userSchema.validate(
    {
      name: 'jimmy',
      age: '24',
    },
    { strict: true },
  );
*/